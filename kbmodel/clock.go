// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Clock clock
//
// swagger:model Clock
type Clock struct {

	// current utc time
	// Format: date-time
	CurrentUtcTime strfmt.DateTime `json:"currentUtcTime,omitempty"`

	// local date
	// Format: date
	LocalDate strfmt.Date `json:"localDate,omitempty"`

	// time zone
	TimeZone string `json:"timeZone,omitempty"`
}

// Validate validates this clock
func (m *Clock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentUtcTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Clock) validateCurrentUtcTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentUtcTime) { // not required
		return nil
	}

	if err := validate.FormatOf("currentUtcTime", "body", "date-time", m.CurrentUtcTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Clock) validateLocalDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("localDate", "body", "date", m.LocalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clock based on context it is used
func (m *Clock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Clock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Clock) UnmarshalBinary(b []byte) error {
	var res Clock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
